#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit
IFS=$'\t\n'

asdf_yarn_fail() {
  >&2 echo "â›” $*"
  exit 1
}

asdf_yarn_progress() {
  >&2 printf "\e[32m"
  if [[ "$1" -gt 0 ]]; then
    for i in $(seq 1 "$1"); do
      >&2 printf "â–ˆ"
    done
  fi
  >&2 printf "\e[2m"
  if [[ "$1" -lt 5 ]]; then
    for i in $(seq "$1" 4); do
      >&2 printf "â–ˆ"
    done
  fi
  >&2 printf "\e[0m "
}

asdf_yarn_progress_clear() {
  >&2 printf "\b\b\b\b\b\b"
}

asdf_yarn_progress_step() {
  asdf_yarn_progress_clear
  asdf_yarn_progress "$@"
}

asdf_yarn_keyring() {
  local YARN_KEYRING="${ASDF_DATA_DIR:-$HOME/.asdf}/keyrings/yarn"

  if [ ! -d "${YARN_KEYRING}" ]; then
    mkdir -p "${YARN_KEYRING}"
    chmod 0700 "${YARN_KEYRING}"
  fi

  echo "${YARN_KEYRING}"
}

asdf_yarn_download_wget() {
  # Download archive
  wget -q -O "yarn-v${ASDF_INSTALL_VERSION}.tar.gz" "https://classic.yarnpkg.com/downloads/${ASDF_INSTALL_VERSION}/yarn-v${ASDF_INSTALL_VERSION}.tar.gz" || asdf_yarn_fail 'failed to download archive'

  # Download archive signature
  wget -q -O "yarn-v${ASDF_INSTALL_VERSION}.tar.gz.asc" "https://classic.yarnpkg.com/downloads/${ASDF_INSTALL_VERSION}/yarn-v${ASDF_INSTALL_VERSION}.tar.gz.asc" || asdf_yarn_fail 'failed to download signature'

  # Download and import signing key
  wget -q -O - "https://dl.yarnpkg.com/debian/pubkey.gpg" | GNUPGHOME="$(asdf_yarn_keyring)" gpg -q --import || asdf_yarn_fail 'failed to download signing key'
}

asdf_yarn_download_curl() {
  # Download archive
  curl -sSL -o "yarn-v${ASDF_INSTALL_VERSION}.tar.gz" "https://classic.yarnpkg.com/downloads/${ASDF_INSTALL_VERSION}/yarn-v${ASDF_INSTALL_VERSION}.tar.gz" || asdf_yarn_fail 'failed to download archive'

  # Download archive signature
  curl -sSL -o "yarn-v${ASDF_INSTALL_VERSION}.tar.gz.asc" "https://classic.yarnpkg.com/downloads/${ASDF_INSTALL_VERSION}/yarn-v${ASDF_INSTALL_VERSION}.tar.gz.asc" || asdf_yarn_fail 'failed to download signature'

  # Download and import signing key
  curl -sSL "https://dl.yarnpkg.com/debian/pubkey.gpg" | GNUPGHOME="$(asdf_yarn_keyring)" gpg -q --import || asdf_yarn_fail 'failed to download signing key'
}

asdf_yarn_download() {
  if [ -x "$(which wget)" ]; then
    asdf_yarn_download_wget
  else
    if [ -x "$(which curl)" ]; then
      asdf_yarn_download_curl
    fi
  fi
}

asdf_yarn_install() {
  >&2 printf "ðŸ§¶ yarn ${ASDF_INSTALL_VERSION} "
  local ASDF_YARN_DIR="$(mktemp -d -t asdf-yarn-XXXXXXX)"

  (
    cd "${ASDF_YARN_DIR}"

    asdf_yarn_progress 0
    asdf_yarn_download

    asdf_yarn_progress_step 1
    # Verify archive signature
    GNUPGHOME="$(asdf_yarn_keyring)" gpg -q --verify "yarn-v${ASDF_INSTALL_VERSION}.tar.gz.asc" "yarn-v${ASDF_INSTALL_VERSION}.tar.gz" 2>/dev/null || asdf_yarn_fail 'failed to verify signature'

    asdf_yarn_progress_step 2
    # Extract archive
    tar xzf "yarn-v${ASDF_INSTALL_VERSION}.tar.gz" --strip-components=1 --no-same-owner

    asdf_yarn_progress_step 3
    # Remove downloaded files
    rm -f "yarn-v${ASDF_INSTALL_VERSION}.tar.gz" "yarn-v${ASDF_INSTALL_VERSION}.tar.gz.asc"
  )

  asdf_yarn_progress_step 4

  if [ -d "${ASDF_INSTALL_PATH}" ]; then
    # Remove existing install directory
    rm -fR "${ASDF_INSTALL_PATH}"
  fi

  # Create parent directory, if necessary
  mkdir -p "$(dirname "${ASDF_INSTALL_PATH}")"

  # Finish the installation
  mv "${ASDF_YARN_DIR}" "${ASDF_INSTALL_PATH}"

  asdf_yarn_progress_step 5
  echo 'âœ… installed!'
}

[ "${ASDF_INSTALL_TYPE}" == 'ref' ] && asdf_yarn_fail "This plugin does not support installing by ref."
[ -z "${ASDF_INSTALL_VERSION}" ] && asdf_yarn_fail "Unspecified install version."
[ -z "${ASDF_INSTALL_PATH}" ] && asdf_yarn_fail "No installation directory was provided. Are you running this command via asdf? Try running 'asdf install yarn <version>'"
[ -x "$(which wget)" -o -x "$(which curl)" ] || asdf_yarn_fail "Missing one of either of the following dependencies: wget, curl"
[ -x "$(which tar)" -a -x "$(which gpg)" ] || asdf_yarn_fail "Missing one or more of the following dependencies: tar, gpg"

asdf_yarn_install $*
